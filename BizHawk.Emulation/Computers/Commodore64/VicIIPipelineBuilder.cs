using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BizHawk.Emulation.Computers.Commodore64
{
	public partial class VicII
	{
		private const uint OpNone = 0x000;
		private const uint OpUpdateVc = 0x001;
		private const uint OpChkSprCrunch = 0x002;
		private const uint OpUpdateMcBase = 0x004;
		private const uint OpChkBrdL1 = 0x008;
		private const uint OpChkBrdL0 = 0x010;
		private const uint OpChkBrdR0 = 0x020;
		private const uint OpChkBrdR1 = 0x040;
		private const uint OpChkSprDma = 0x080;
		private const uint OpChkSprExp = 0x100;
		private const uint OpUpdateRc = 0x200;
		private const uint OpChkSprDisp = 0x400;

		private static uint[][] cycleTabNTSC = new uint[][]
		{
			new uint[] // x
			{
				0x19C, 0x1A4, 0x1AC, 0x1B4, 0x1BC,
				0x1C4, 0x1CC, 0x1D4, 0x1DC, 0x1E4,
				0x1EC, 0x1F4, 0x1FC, 0x004, 0x00C,
				0x014, 0x01C, 0x024, 0x02C, 0x034,
				0x03C, 0x044, 0x04C, 0x054, 0x05C,
				0x064, 0x06C, 0x074, 0x07C, 0x084,
				0x08C, 0x094, 0x09C, 0x0A4, 0x0AC,
				0x0B4, 0x0BC, 0x0C4, 0x0CC, 0x0D4,
				0x0DC, 0x0E4, 0x0EC, 0x0F4, 0x0FC,
				0x104, 0x10C, 0x114, 0x11C, 0x124,
				0x12C, 0x134, 0x13C, 0x144, 0x14C,
				0x154, 0x15C, 0x164, 0x16C, 0x174,
				0x17C, 0x184, 0x184, 0x18C, 0x194
			},
			new uint[] // fetch (0-7=P 8-F=S 10=I 11=R 12=G/C)
			{
				0x0B, 0x04, 0x0C, 0x05, 0x0D,
				0x06, 0x0E, 0x07, 0x0F, 0x10,
				0x11, 0x11, 0x11, 0x11, 0x11,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x10, 0x10, 0x10, 0x00, 0x08,
				0x01, 0x09, 0x02, 0x0A, 0x03
			},
			new uint[] // ba (flg/spr/spr/spr 8=none)
			{
				0x0845, 0x0885, 0x0856, 0x0886, 0x0867,
				0x0887, 0x0887, 0x0888, 0x0888, 0x0888,
				0x0888, 0x0888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x0880, 0x0880, 0x0801, 0x0881, 0x0812,
				0x0882, 0x0823, 0x0883, 0x0834, 0x0884
			},
			new uint[] // operations
			{
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpUpdateVc,    OpChkSprCrunch,
				OpUpdateMcBase,OpChkBrdL1,    OpChkBrdL0,    OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpChkSprDma|OpChkBrdR0|OpChkSprExp,
				OpChkSprDma|OpChkBrdR1,
				OpUpdateRc,
				OpChkSprDisp,
				OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone
			}
		};

		private static uint[][] cycleTabPAL = new uint[][]
		{
			new uint[] // x
			{
				0x194, 0x19C, 0x1A4, 0x1AC, 0x1B4,
				0x1BC, 0x1C4, 0x1CC, 0x1D4, 0x1DC,
				0x1E4, 0x1EC, 0x1F4, 0x004, 0x00C,
				0x014, 0x01C, 0x024, 0x02C, 0x034,
				0x03C, 0x044, 0x04C, 0x054, 0x05C,
				0x064, 0x06C, 0x074, 0x07C, 0x084,
				0x08C, 0x094, 0x09C, 0x0A4, 0x0AC,
				0x0B4, 0x0BC, 0x0C4, 0x0CC, 0x0D4,
				0x0DC, 0x0E4, 0x0EC, 0x0F4, 0x0FC,
				0x104, 0x10C, 0x114, 0x11C, 0x124,
				0x12C, 0x134, 0x13C, 0x144, 0x14C,
				0x154, 0x15C, 0x164, 0x16C, 0x174,
				0x17C, 0x184, 0x18C
			},
			new uint[] // fetch (0-7=P 8-F=S 10=I 11=R 12=G/C)
			{
				0x03, 0x0B, 0x04, 0x0C, 0x05,
				0x0D, 0x06, 0x0E, 0x07, 0x0F,
				0x11, 0x11, 0x11, 0x11, 0x11,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x12, 0x12, 0x12, 0x12, 0x12,
				0x10, 0x10, 0x00, 0x08, 0x01,
				0x09, 0x02, 0x0A
			},
			new uint[] // ba (flg/spr/spr/spr 8=none)
			{
				0x0884, 0x0845, 0x0885, 0x0856, 0x0886, 
				0x0867, 0x0887, 0x0887, 0x0888, 0x0888,
				0x0888, 0x0888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1888,
				0x1888, 0x1888, 0x1888, 0x1888, 0x1880,
				0x0880, 0x0801, 0x0881, 0x0812, 0x0882,
				0x0823, 0x0883, 0x0834
			},
			new uint[] // operations
			{
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpUpdateVc,    OpChkSprCrunch,
				OpUpdateMcBase,OpChkBrdL1,    OpChkBrdL0,    OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone,
				OpNone,        OpNone,        OpNone,        OpNone,        OpChkSprDma,
				OpChkSprDma|OpChkBrdR0|OpChkSprExp,
				OpChkBrdR1,
				OpUpdateRc|OpChkSprDisp,
				OpNone,        OpNone,        OpNone,        OpNone,        OpNone
			}
		};
	}
}
